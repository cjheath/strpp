// Px grammar for HTTP protocol requests (full header)

// Derived from July 2025 https://github.com/evan/mongrel/blob/master/ext/http11/http11_parser_common.rl

// line endings
CRLF =
	'\r\n'

//safe =
//	[-$_.]

//extra =
//	[!*'(),]

reserved =
	[;/?:@&=+]

//unsafe =
//	[\x00-\x1F "#%<>\x7F]

//national =
//	// !\a !\d !reserved !extra !safe !unsafe .
//	// -> COLLAPSED to char chass:
//	![-\w;/?:@&=+!*'(),$_.\x00-\x1F "#%<>\x7F] .

unreserved =
	// (alpha | digit | safe | extra | national);
	// -> COLLAPSED to
	// | [-\w$_.!*'(),] | national
	// safe and extra are allowed, so we can use a definiton of national which excludes them:
	| [-\w$_.!*'(),] | ![;/?:@&=+\x00-\x1F "#%<>\x7F] .

escape =
	'%\h\h'

uchar =
	| unreserved | escape

pchar =
	| unreserved | escape | [:@&=+]

tspecials =
	[()<>@,;:\\\"/\[\]?={} \t]

// elements
token =
	!tspecials [ -\x7E]

// URI schemes and absolute paths
scheme =
	*[-\w+-.]

absolute_uri =
	scheme ':' *(| uchar | reserved)

path =
	+pchar *('/' *pchar)

query =
	*(| uchar | reserved)

param =
	*(| param | '/')

params =
	param *(';' param)

rel_path =
	?path:request_path ?(';' params) ?('?' query)
	-> request_path, params, query

absolute_path =
	+'/' rel_path

request_URI =
	| '*':uri | absolute_uri:uri | absolute_path:uri
	-> uri

fragment =
	'#' *(| uchar | reserved)

method =	// Upper, digit or safe
	// {1,20}[-\u\d$_.]	// REVISIT: Should limit method to 20 chars for extra safety
	+[-\u\d$_.]

http_number =
	+\d '.' +\d

http_version =
	'HTTP/' http_number
	-> http_number

request_line =
	method ' ' request_URI ?fragment ' ' http_version CRLF
	-> method, request_URI, fragment, http_version

field_name =
	+(!tspecials !':' [ -\x7E])

field_value =
	*(!CRLF .)

message_header =
	field_name ':' *' ' field_value CRLF
	-> field_name, field_value

Request =
	request_line *message_header CRLF
	-> request_line, message_header

TOP = Request
