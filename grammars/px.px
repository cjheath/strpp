// Pegexp grammar; a prefix Backus-Naur form.

// REVISIT: Add capture markers

EOF		= !.

// Whitespace may include an end-of-line, or a //comment to eol, but not a blank line (two newlines separated by nothing but whitespace)
blankline	= '\n' *[ \t\r] (|'\n' | EOF)		// A line containing no printing characters (ends with newline or EOF)

space		=| [ \t\r\n] | '//' *[^\n]		// Any single whitespace

s		= *( !blankline space )			// Any space not including a blankline

TOP		= *space *rule

rule		= name s '=' s alternates blankline *space

alternates	=| +('|' s *repetition)			// Either a list of alternates
		| *repetition				// or just one alternate

repetition	= ?[?*+!&] s				// zero or one, zero or more, one or more, none
		  atom

atom		=| '.'					// Any character
		| name					// call to another rule
		| literal				// A literal
		| property				// A character property
		| class					// A character class
		| '(' s +alternates ')' s		// A parenthesised group

// Character properties here: \a = any letter, \w = any letter or digit
name		= [\a_] *[\w_] s

literal		= ['] *(!['] literal_char) ['] s

literal_char	=| '\\' (
			| ?[0-3] [0-7] ?[0-7]		// octal character constant
			| 'x\h' ?\h			// hex character \x12
			| 'x{' +\h '}'			// hex character \x{...}
			| 'u' ?[01] \h ?\h ?\h ?\h	// Unicode character \u12345
			| 'u{' +\h '}'	 		// Unicode character \u{...}
			| [^\\n]			// other special escape except newline
			)
		| [^\\\n]				// any normal character except backslash or newline

property	= '\\' [adhsw] s			// alpha, digit, hexadecimal, whitespace, word (alpha or digit)

class		= '[' ?'^' ?'-' +class_part ']' s	// A character class

class_part	= !']' class_char ?( '-' !']' class_char )

class_char	= ![-\]] literal_char
