// Px grammar for the Px grammar-specification language.
// Px is a Backus-Naur form with operators in prefix position

EOF =					// End of file is where nothing follows
	!.

// space may include an end-of-line, or a //comment to eol
space =
	| [ \t\r\n]			// Any single whitespace
	| '//' *[^\n]			// including a comment to end-of-line

// A blankline is defined as two newlines separated by nothing but whitespace
blankline =
	'\n' *[ \t\r] (| '\n' | EOF)

// optional embedded whitespace is any amount of space not including a blank line
s =
	*(!blankline space)		// Any space not including a blankline

TOP =					// This grammar expects some rules
	*space *rule
	-> rule

rule =
	name s '=' s			// A named rule matches...
	alternates ?action		// alternates perhaps followed by an action
	blankline *space		// and ends in a blank line
	-> name, alternates, action

action =				// An action says which bits of a rule to capture
	'->' s
	  ?(name:function ':' s)	// I'm not sure that function is needed here
	  parameter *(',' s parameter) s
	-> function, parameter

parameter =
	(| reference:parameter | '\'' literal:parameter '\'') s	// A parameter to an action
	-> parameter

reference =
	name s *([.*]:joiner s name)	// Name/Path of a subrule or labelled atom to capture
	-> name, joiner

alternates =
	| +('|' s sequence)		// Either a list of alternates
	| sequence			// or just one alternate
	-> sequence

sequence =
	*repetition
	-> repetition

repeat_count =
	| [?*+!&]:limit s		// zero or one, zero or more, one or more, none
	| count:limit			// Either a number literal or a variable reference
	-> limit

count =
	'{' (| (+\d):val | name:val) s '}' s	// {literal count or reference to a saved variable}
	-> val

repetition =
	?repeat_count			// How many times must the following be seen
	atom
	?label
	s
	-> repetition: repeat_count, atom, label

label =
	':' name			// Apply a name to the previous atom
	-> name

atom =
	| '.':any			// The "Any" character
	| name:call			// call to another rule
	| '\\' property			// A character property
	| '\'' literal '\''		// A literal
	| '[' class ']'			// A character class
	| '(' group ')'
	-> any, call, property, literal, class, group

group =
	s +alternates			// Contents of a parenthesised group
	-> alternates

// Character properties here: \a = any letter, \w = any letter or digit
name =
	[\a_] *[\w_]

literal =				// Contents of a literal string
	*(!['] literal_char)

literal_char =
	| '\\'
	  (| ?[0-3] [0-7] ?[0-7]	// octal character constant
	   | 'x\h' ?\h			// hex character \x12
	   | 'x{' +\h '}'		// hex character \x{...}
	   | 'u' \h ?\h ?\h ?\h		// Unicode character \u1234
	   | 'u{' +\h '}'		// Unicode character \u{...} (max 8 digits but that's not enforced)
	   | [^\\n] )			// other special escape except newline
	| [^\\\n]			// any normal character except backslash or newline

property =				// Contents of a property
	[adhswLU]			// alpha, digit, hexadecimal, whitespace, word (alpha or digit), lower, upper

class =					// Contents of a character class
	?'^' ?'-' +class_part

class_part =
	!']' class_char ?('-' !']' class_char)

class_char =
	![-\]] literal_char
