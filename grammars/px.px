// Pegexp grammar; a prefix Backus-Naur form.
EOF		= !.

// Whitespace may include an end-of-line, or a //comment to eol, but not a blank line (two newlines separated by nothing but whitespace)
blankline	= '\n' *[ \t\r] (|'\n' | EOF)		// A line containing no printing characters (ends with newline or EOF)

space		=| [ \t\r\n]				// Any single whitespace
		 | '//' *[^\n]				// including a comment to end-of-line

s		= *( !blankline space )			// Any space not including a blankline

TOP		= *space *rule
		-> rule

rule		= name s '=' s				// Rule: name of a rule that matches one or more alternates
		alternates ?action			// and perhaps has an action.
		blankline *space			// It ends in a blank line
		-> name, alternates, action

action		= '->' s
		  ?(name:function ':' s )		// REVISIT: I'm not sure that function is needed here
		  parameter:list *( ',' s parameter:list ) s
		-> function, list

parameter	= ( |reference:param |literal:param ) s	// A parameter to an action
		-> param

reference	= name					// A reference to a result (which may be inside a repetition)

alternates	=| +('|' s sequence)			// Either a list of alternates
		 | sequence				// or just one alternate
		-> sequence

sequence	= *repetition
		-> repetition

repeat_count	=| [?*+!&]:limit s			// zero or one, zero or more, one or more, none
		 | count:limit
		-> limit

count		= '{' (|(+\d):val |name:val) s '}' s	// {literal count or reference to a saved variable}
		-> val

repetition	= ?repeat_count				// How many times must the following be seen
		  atom
		  ?label
		  s
		  -> repetition: repeat_count, atom, label

label		= ':' name				// Apply a name to the previous atom
		-> name

atom		=| '.':atom				// Any character
		 | name:atom				// call to another rule
		 | literal:atom				// A literal
		 | property:atom			// A character property
		 | class:atom				// A character class
		 | group:atom
		 -> atom

group		= '(' s +alternates ')'			// A parenthesised group
		-> alternates

// Character properties here: \a = any letter, \w = any letter or digit
name		= [\a_] *[\w_]

literal		= ['] *(!['] literal_char) [']

literal_char	=| '\\' (
			| ?[0-3] [0-7] ?[0-7]		// octal character constant
			| 'x\h' ?\h			// hex character \x12
			| 'x{' +\h '}'			// hex character \x{...}
			| 'u' ?[01] \h ?\h ?\h ?\h	// Unicode character \u12345
			| 'u{' +\h '}'	 		// Unicode character \u{...}
			| [^\\n]			// other special escape except newline
			)
		| [^\\\n]				// any normal character except backslash or newline

property	= '\\' [adhsw] s			// alpha, digit, hexadecimal, whitespace, word (alpha or digit)

class		= '[' ?'^' ?'-' +class_part ']'		// A character class

class_part	= !']' class_char ?( '-' !']' class_char )

class_char	= ![-\]] literal_char
